using System.Collections.Generic;
using Flunt.Notifications;
using Krafted.Framework.SharedKernel.Application.Commands.Result;

namespace Krafted.Framework.SharedKernel.Application
{
    public abstract class ApplicationService : Notifiable
    {
        protected readonly ICommandResultFactory _commandResultFactory;

        protected ApplicationService(ICommandResultFactory commandResultFactory)
        {
            _commandResultFactory = commandResultFactory;
        }

        protected ICommandResult SuccessCommandResult(object data)
        {
            var commandResult = new ClientCommandResult(_commandResultFactory);
            return commandResult.NewSuccessCommandResult(data);
        }

        protected ICommandResult FailCommandResult(IReadOnlyCollection<Notification> notifications, string message)
        {
            var commandResult = new ClientCommandResult(_commandResultFactory);
            return commandResult.NewFailCommandResult(notifications, message);
        }

        protected ICommandResult FailCommandResult(string message)
        {
            var commandResult = new ClientCommandResult(_commandResultFactory);
            return commandResult.NewFailCommandResult(message);
        }
    }
}
